#include "fixture.h"

#include <iostream>
#include <iomanip>

// =====================================================================================================================
Fixture::Fixture()
{
    m_ram = new uint8_t[64 * 1024 /* 64kB */];

    // setup RESET vector to 0x8000
    m_ram[0xfffc] = 0x00;
    m_ram[0xfffd] = 0x80;

    m_cpu.reset(new lib6502::Cpu(*this));

    // remove memory access history generated by the CPU reset
    m_memAccessHist.clear();
}

// =====================================================================================================================
Fixture::~Fixture()
{
    delete[] m_ram;
}

// =====================================================================================================================
uint8_t Fixture::read(uint16_t addr)
{
    m_memAccessHist.push_back({Read, addr});
    return m_ram[addr];
}

// =====================================================================================================================
void Fixture::write(uint16_t addr, uint8_t data)
{
    m_memAccessHist.push_back({Write, addr});
    m_ram[addr] = data;
}

// =====================================================================================================================
void Fixture::dumpMemoryAccess()
{
    std::cerr << "Memory access:"<< std::endl;

    for (const auto& a : m_memAccessHist)
    {
	switch (a.m_type)
	{
	    case Read : std::cerr << "  read @ "; break;
	    case Write : std::cerr << "  write @ "; break;
	}

	std::cerr << std::hex << std::setw(4) << std::setfill('0') << a.m_address << std::endl;
    }
}
